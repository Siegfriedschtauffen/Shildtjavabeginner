package obobsheniya;

// Применение базового типа.
class Gen2<T>{
    T ob; // объявить объект типа T
    // передать конструктору ссылку на объект типа T
    Gen2(T o){
        ob = o;
    }
    // возвратить объект ob

    T getOb() {
        return ob;
    }
}
// Продемонстрировать использование базового типа.
public class RawDemo {
    public static void main(String[] args) {
        // создать объект типа Gen2 для класса Integer
        Gen2<Integer> iOb = new Gen2<Integer>(88);

        // создать объект типа Gen2 для класса String
        Gen2<String> strOb = new Gen2<String>("Generics Test");

        // создать объект типа Gen2 для базового типа
        // и передать ему значение типа Double
        // Если аргумент типа не передается, создается базовый тип.
        Gen2 raw = new Gen2(new Double(98.6));

        // Здесь требуется приведение типов, так как тип неизвестен.
        double d = (Double) raw.getOb();
        System.out.println("value: " + d);

        // Использование базового типа может привести
        // к исключениям при выполнении программы.
        // Ниже представлен ряд тому примеров.

        // Следующее приведение типов вызывает ошибку
        // при выполнении программы!
      //  int i = (Integer) raw.getOb();

        // Следующее присваивание чревато ошибкой.
        // Базовые типы отменяют типовую безопасность.
        strOb = raw; // Допустимо, но потенциально ошибочно.
      //  String str = strOb.getOb(); // Ошибка при выполнении программы.

        // Следующее присваивание также чревато ошибкой.
        raw = iOb; // Допустимо, но потенциально ошибочно.
      //  d = (Double) raw.getOb(); // Ошибка при выполнении программы.
    }
}
